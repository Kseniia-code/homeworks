// При першому додаванні цифра "3" перетвориться на строку і додасться до строки "number", результатом буде "number3",
// При другому додаванні цифра "3" також перетвориться на строку і додасться до строки "number3", результатом додавання буде строка: "number33";
'number' + 3 + 3

//Результатом додавання null (відсутності значення) і реального значення (в даному випадку, число) буде реальне значення: 3;
null + 3

//При застосуванні логічного оператора "І" до небулевих значень, результатом операції буде останнє значення у виразі: qwerty;    
5 && "qwerty"

//Спочатку строки "40" і "2" перетворюються на числа, потім ці числа додаються, в результаті отримуємо число "42";
//Далі число "42" додається до строки "hillel", в результаті отримуємо строку: 42hillel;
+'40' + +'2' + "hillel";

//Cпочатку строка перетворюється на число "10". Далі відбувається операція віднімання, в результаті якої отримуємо число "5".
// Так як число "5" не може строго дорівнювати числу "6", в кінцевому результаті ми отримуємо boolean значення: false;
'10' - 5 === 6;

//Тип даних boolean перетворюється на числовий тип, значення "true" перетворюється на число "1", а значення "false" - на число "0".
//Результатом додавання буде числове значення: 1;
true + false

//Результатом віднімання буде значення: NaN (not a number);
'4px' - 3

//Cпочатку строка перетворюється на число. Далі відбувається операція віднімання, в результаті якої отримуємо число: 1;
'4' - 3

//Спочатку відбувається зведення в ступінь: число "3" в ступені "0" дорівнює "1". Потім число "1" перетворюється на строку;
//Далі до строки "6" додається строка "1", в результаті отримуємо строку: 61;
'6' + 3 ** 0;

//Cпочатку строка "6" перетворюється на число. Далі відбувається операція поділу, в результаті отримуємо число: 2;
12 / '6'

//Cпочатку відбувається строге порівняння чисел "5" і "6", в результаті чого отримуємо "false".
//Далі boolean оператор "false" перетворюється на строку і додається до строки "10". 
//Результатом виразу буде строка: 10false;
'10' + (5 === 6);

//Операція порівняння будь-чого з null завжди буде false, тож і в результаті порівняння в цьому прикладі, ми отримуємо "false".
null == ''

//Спочатку відбувається поділ (9/3), в результаті чого отримуємо число "3". Далі відбувається зведення в ступінь (3 ** 3), в результаті чого ми отримуємо число: 27.
3 ** (9 / 3);

//Оператор "!!" приводить строки до типу даних boolean: для кожної непорожньої строки, він вертає значення "true".
//Далі відбувається операція порівняння "true" і "true", в результаті чого ми отримуємо boolean значення "true".
!!'false' == !!'true'

//Результатом виразу буде число: 1.
0 || '0' && 1

//Спочатку відбувається приведення null до числа "0". Далі число "0" приводиться до типу даних boolean та порівнюється з boolean значенням "false",
//результатом чого є boolean значення "true". Далі відбувається перевірка, що "true" менше числа "1",
//результатом чого є boolean значення "false" (бо при порівнянні "true" та числа "1", значення "true" приводиться до числа "1"
//а оскільки "1" не менше самого себе, то в результаті отримуємо значення "false")
(+null == false) < 1;

//Результатом логічної операції && буде "false", а результатом логічної операції || буде "true".
//В результаті ми отримуємо відповідь: true.
false && true || true

//Спочатку відбувається логічна операція ||, результатом якої буде значення "true"; 
//Далі відбувається логічна операція &&, і кінцевим результатом буде значення "false".
false && (false || true);

//Спочатку відбувається приведення null до числа "0". Далі число "0" приводиться до типу даних boolean та порівнюється з boolean значенням "false",
//результатом чого є boolean значення "true". Далі відбувається зведення в ступінь числа "1", результатом 
//чого буде "1". Після цього відбувається перевірка, що true менше числа "1", результатом чого є boolean значення "false".
(+null == false) < 1 ** 5;